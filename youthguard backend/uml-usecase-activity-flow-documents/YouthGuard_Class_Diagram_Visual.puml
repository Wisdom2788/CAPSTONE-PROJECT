@startuml YouthGuard_Class_Diagram_Visual
!theme plain
skinparam classAttributeIconSize 0
skinparam classFontSize 12
skinparam classBackgroundColor White
skinparam classBorderColor Black

title YouthGuard MVP - Class Relationships

' Abstract User class
abstract class User {
  - userId: String
  - email: String
  - password: String
  - firstName: String
  - lastName: String
  - phoneNumber: String
  - dateCreated: Date
  - isActive: Boolean
  --
  + register(): Boolean
  + login(): Boolean
  + logout(): Boolean
  + updateProfile(): Boolean
  {abstract} + getRole(): String
}

' Youth class
class Youth {
  - educationLevel: String
  - employmentStatus: String
  - totalCoursesCompleted: Integer
  - totalCertificates: Integer
  --
  + enrollInCourse(courseId): Boolean
  + applyForJob(jobId): Boolean
  + requestMentorship(mentorId): Boolean
  + getProgress(): List<Progress>
  + getCertificates(): List<Certificate>
}

' Mentor class  
class Mentor {
  - expertise: List<String>
  - yearsOfExperience: Integer
  - company: String
  - menteeLimit: Integer
  - currentMentees: Integer
  - rating: Float
  --
  + acceptMentorshipRequest(youthId): Boolean
  + scheduleMentorshipSession(): Boolean
  + provideFeedback(): Boolean
  + isAvailable(): Boolean
}

' Employer class
class Employer {
  - companyName: String
  - industry: String
  - companySize: String
  - website: String
  - verificationStatus: Boolean
  - jobsPosted: Integer
  --
  + postJob(jobData): Boolean
  + searchCandidates(): List<Youth>
  + reviewApplication(applicationId): Boolean
  + getPostedJobs(): List<Job>
}

' Course class
class Course {
  - courseId: String
  - title: String
  - description: String
  - instructor: String
  - duration: Integer
  - difficulty: String
  - price: Float
  - enrollmentCount: Integer
  - rating: Float
  - isActive: Boolean
  --
  + createCourse(): Boolean
  + updateContent(): Boolean
  + addLesson(lesson): Boolean
  + getLessons(): List<Lesson>
  + getEnrolledStudents(): List<Youth>
}

' Lesson class
class Lesson {
  - lessonId: String
  - courseId: String
  - title: String
  - content: String
  - videoUrl: String
  - duration: Integer
  - orderIndex: Integer
  --
  + createLesson(): Boolean
  + updateContent(): Boolean
  + markAsCompleted(youthId): Boolean
  + getQuizResults(): Object
}

' Job class
class Job {
  - jobId: String
  - employerId: String
  - title: String
  - description: String
  - location: String
  - salaryMin: Float
  - salaryMax: Float
  - applicationDeadline: Date
  - isActive: Boolean
  --
  + createJob(): Boolean
  + updateJob(): Boolean
  + getApplications(): List<Application>
  + matchCandidates(): List<Youth>
}

' Application class
class Application {
  - applicationId: String
  - jobId: String
  - youthId: String
  - coverLetter: String
  - status: String
  - appliedDate: Date
  - feedback: String
  --
  + submitApplication(): Boolean
  + updateStatus(status): Boolean
  + addFeedback(feedback): Boolean
  + withdraw(): Boolean
}

' Progress class
class Progress {
  - progressId: String
  - youthId: String
  - courseId: String
  - lessonId: String
  - completionStatus: String
  - completedDate: Date
  - score: Float
  --
  + updateProgress(status): Boolean
  + recordTimeSpent(time): Boolean
  + updateScore(score): Boolean
  + getCompletionPercentage(): Float
}

' Certificate class
class Certificate {
  - certificateId: String
  - youthId: String
  - courseId: String
  - issueDate: Date
  - verificationCode: String
  - isValid: Boolean
  --
  + generateCertificate(): Boolean
  + verifyCertificate(code): Boolean
  + downloadCertificate(): File
}

' Message class
class Message {
  - messageId: String
  - senderId: String
  - receiverId: String
  - content: String
  - timestamp: Date
  - isRead: Boolean
  --
  + sendMessage(): Boolean
  + markAsRead(): Boolean
  + deleteMessage(): Boolean
}

' Skill class
class Skill {
  - skillId: String
  - name: String
  - category: String
  - level: String
  --
  + createSkill(): Boolean
  + updateSkill(): Boolean
}

' Relationships with clear cardinalities
User <|-- Youth : "inherits"
User <|-- Mentor : "inherits"  
User <|-- Employer : "inherits"

Youth "1" --> "0..*" Progress : "tracks"
Youth "1" --> "0..*" Application : "submits"
Youth "1" --> "0..*" Certificate : "earns"
Youth "0..*" --> "0..*" Skill : "has"

Course "1" --> "1..*" Lesson : "contains"
Course "1" --> "0..*" Progress : "tracked in"
Course "1" --> "0..*" Certificate : "awards"

Job "1" --> "0..*" Application : "receives"
Employer "1" --> "0..*" Job : "posts"

User "1" --> "0..*" Message : "sends"
User "1" --> "0..*" Message : "receives"

Mentor "1" --> "0..*" Youth : "mentors"

note right of User : Abstract base class\nfor all user types

note bottom of Youth : Primary users of\nthe platform

note top of Course : Core learning\ncontent structure

note left of Application : Links youth\nto job opportunities

@enduml