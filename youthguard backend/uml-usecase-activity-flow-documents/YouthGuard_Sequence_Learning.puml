@startuml YouthGuard_Sequence_LearningFlow
!theme plain
title YouthGuard MVP - Learning Flow Sequence Diagram

participant "Youth App" as App
participant "Course Service" as Course
participant "Progress Service" as Progress
participant "Certificate Service" as Cert
participant "Database" as DB
participant "File Storage" as Storage

== Course Enrollment ==
App -> Course: POST /api/courses/{courseId}/enroll
Course -> DB: checkUserEnrollment(userId, courseId)
DB --> Course: notEnrolled: true
Course -> DB: checkCourseCapacity(courseId)
DB --> Course: hasCapacity: true
Course -> DB: createEnrollment(userId, courseId)
DB --> Course: enrollmentId
Course -> Progress: initializeProgress(userId, courseId)
Progress -> DB: createProgressRecords(userId, courseId, lessons)
Progress --> Course: progressInitialized: true
Course --> App: {success: true, enrollmentId, firstLessonId}

== Lesson Access ==
App -> Course: GET /api/lessons/{lessonId}
Course -> DB: checkUserAccess(userId, lessonId)
DB --> Course: hasAccess: true
Course -> DB: getLessonContent(lessonId)
DB --> Course: lessonData
Course -> Storage: getVideoStreamUrl(lessonId)
Storage --> Course: streamUrl
Course -> Progress: recordLessonStart(userId, lessonId)
Progress -> DB: updateProgressStatus(userId, lessonId, "started")
Course --> App: {lesson: {content, videoUrl, materials}, progress}

== Progress Tracking ==
App -> Progress: POST /api/progress/update
App -> Progress: {lessonId, timeSpent, currentPosition}
Progress -> DB: updateTimeSpent(userId, lessonId, timeSpent)
Progress -> DB: updateVideoPosition(userId, lessonId, currentPosition)
Progress --> App: {success: true}

== Lesson Completion ==
App -> Progress: POST /api/progress/complete-lesson
App -> Progress: {lessonId, completionData}
Progress -> DB: markLessonComplete(userId, lessonId)
Progress -> DB: calculateCourseProgress(userId, courseId)
DB --> Progress: courseProgress: 75%
Progress -> Course: checkNextLessonAccess(userId, courseId)
Course -> DB: getNextLesson(courseId, currentLessonOrder)
DB --> Course: nextLessonId
Course -> DB: unlockLesson(userId, nextLessonId)
Progress --> App: {lessonCompleted: true, nextLessonId, courseProgress: 75%}

== Quiz Taking ==
App -> Course: GET /api/lessons/{lessonId}/quiz
Course -> DB: getQuizQuestions(lessonId)
DB --> Course: quizData
Course --> App: {quiz: {questions, timeLimit, passingScore}}

App -> Course: POST /api/lessons/{lessonId}/submit-quiz
App -> Course: {answers, timeSpent}
Course -> Course: evaluateQuiz(answers, correctAnswers)
Course -> DB: saveQuizAttempt(userId, lessonId, score, answers)
alt Quiz Passed (score >= 70%)
    Course -> Progress: markQuizPassed(userId, lessonId)
    Progress -> DB: updateProgressStatus(userId, lessonId, "completed")
    Course --> App: {passed: true, score, feedback, nextLessonUnlocked: true}
else Quiz Failed
    Course -> DB: incrementQuizAttempts(userId, lessonId)
    Course --> App: {passed: false, score, feedback, attemptsRemaining: 2}
end

== Course Completion ==
App -> Progress: GET /api/progress/course/{courseId}
Progress -> DB: getCourseProgress(userId, courseId)
DB --> Progress: allLessonsCompleted: true, finalScore: 85%
Progress -> Cert: generateCertificate(userId, courseId)
Cert -> DB: createCertificateRecord(userId, courseId, score)
DB --> Cert: certificateId
Cert -> Storage: generateCertificatePDF(certificateData)
Storage --> Cert: certificateUrl
Cert -> DB: saveCertificateUrl(certificateId, certificateUrl)
Progress --> App: {courseCompleted: true, certificateId, certificateUrl}

== Certificate Download ==
App -> Cert: GET /api/certificates/{certificateId}/download
Cert -> DB: validateCertificateAccess(userId, certificateId)
DB --> Cert: hasAccess: true
Cert -> Storage: getCertificateFile(certificateId)
Storage --> Cert: fileStream
Cert --> App: certificateFile (PDF)

@enduml